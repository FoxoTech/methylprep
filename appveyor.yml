environment:
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\appveyor\\run_with_env.cmd"

  matrix:

    # For Python versions available on Appveyor, see
    # https://www.appveyor.com/docs/windows-images-software/#python

    #- PYTHON: "C:\\Python27"
    #- PYTHON: "C:\\Python33"
    #- PYTHON: "C:\\Python34"
    #- PYTHON: "C:\\Python35"
    #- PYTHON: "C:\\Python36"
    - PYTHON: "C:\\Python37"
    #- PYTHON: "C:\\Python27-x64"
    #- PYTHON: "C:\\Python33-x64"
    #  DISTUTILS_USE_SDK: "1"
    #- PYTHON: "C:\\Python34-x64"
    #  DISTUTILS_USE_SDK: "1"
    #- PYTHON: "C:\\Python35-x64"
    #- PYTHON: "C:\\Python36-x64"
    - PYTHON: "C:\\Python37-x64"

install:
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
  #- ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
  #      https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
  #      Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
  #        throw "There are newer queued builds for this pull request, failing early." }
  # Log the python version just so we know it
  # - ECHO "%PYTHON% %CMD_IN_ENV%"
  #- ECHO "Filesystem root:"
  #- ps: "ls \"C:/\""
  #- ECHO "Installed SDKs:"
  #- ps: "ls \"C:/Program Files/Microsoft SDKs/Windows\""

  # Install Python (from the official .msi of https://python.org) and pip when
  # not already installed.
  - ps: if (-not(Test-Path($env:PYTHON))) { & appveyor\install.ps1 }

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

  # Upgrade to the latest version of pip to avoid it displaying warnings
  # about it being out of date.
  - "%PYTHON%\\python.exe -m pip install --upgrade pip wheel coverage"

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"
  - "%PYTHON%\\python.exe -m pip install pipenv"
  # - "%PYTHON%\\python.exe -m pipenv install --dev"
  # - "%PYTHON%\\python.exe -m pip install -e ."
  - "pipenv install -e .[socks] --skip-lock"
  # pipenv will use requirements.txt

  # We need wheel installed to build wheels
  # - "%PYTHON%\\python.exe -m pip install wheel"

  # Install the build dependencies of the project. If some dependencies contain
  # compiled extensions and are not provided as pre-built wheel packages,
  # pip will build them from source using the MSVC compiler matching the
  # target Python version and architecture
  # - pip install -r requirements.txt

build: off
  # build step is needed for other languages, not for python

test_script:
  # Run the project tests and store results in .xml log
  # this produces nosetests.xml which is uploaded on_finish
  # &$env:PYTHON\python setup.py nosetests --with-xunit
  - ps: |
      #"pipenv run coverage run --omit '*tests*','*/home/*' setup.py test"
      # if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
      "pipenv run coverage run"
      "pipenv run pytest tests --junit-xml=junit.xml"
      "pipenv run coverage report"
      "pipenv run coverage html"
      "pipenv run coverage xml"
      "pipenv run coveralls"

  # &$env:PYTHON\python -m coverage run report
  # &$env:PYTHON\python -m coverage run xml

  # Put your test command here.
  # If you don't need to build C extensions on 64-bit Python 3.3 or 3.4,
  # you can remove "build.cmd" from the front of the command, as it's
  # only needed to support those cases.
  # Note that you must use the environment variable %PYTHON% to refer to
  # the interpreter you're using - Appveyor does not do anything special
  # to put the Python version you want to use on PATH.
  # - "build.cmd %PYTHON%\\python.exe setup.py test"

after_test:
  - dir
#  This step builds your wheels.
#  Again, you only need build.cmd if you're building C extensions for
#  64-bit Python 3.3/3.4. And you need to use %PYTHON% to get the correct
#  interpreter
#  - "build.cmd %PYTHON%\\python.exe setup.py bdist_wheel"

artifacts:
  # Archive the generated packages in the ci.appveyor.com build report.
  - path: '**_py.html'
    name: methylprep
  - path: 'coverage.xml'
    name: coverage_result


#on_success:
#  You can use this step to upload your artifacts to a public website.
#  See Appveyor's documentation for more details. Or you can simply
#  access your wheels from the Appveyor "artifacts" tab for your build.

#on_finish:
#  Upload test results to AppVeyor

#on_success:
